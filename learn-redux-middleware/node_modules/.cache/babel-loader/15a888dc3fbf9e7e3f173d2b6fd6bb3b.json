{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = 0;\nconst counters = createSlice({\n  name: \"counterReducer\",\n  initialState,\n  reducers: {\n    increase: (state, action) => ({\n      state: state + 1\n    }),\n    decrease: (state, action) => ({\n      state: state - 1\n    })\n  }\n});\nconst counter = counters.reducer;\nexport const {\n  increase,\n  decrease\n} = counters.actions; // 1초 뒤에 incerase 혹은 decrease 함수를 디스패치\n\nexport const increaseAsync = () => dispatch => {\n  setTimeout(() => {\n    dispatch(increase());\n  }, 1000);\n};\nexport const decreaseAsync = () => dispatch => {\n  setTimeout(() => {\n    distpach(decrease());\n  }, 1000);\n};\nexport default counter;","map":{"version":3,"sources":["/Users/jungeun-p/private/Study/React/Study-react/learn-redux-middleware/src/modules/counter.js"],"names":["createSlice","initialState","counters","name","reducers","increase","state","action","decrease","counter","reducer","actions","increaseAsync","dispatch","setTimeout","decreaseAsync","distpach"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG,CAArB;AAEA,MAAMC,QAAQ,GAAGF,WAAW,CAAC;AAC3BG,EAAAA,IAAI,EAAE,gBADqB;AAE3BF,EAAAA,YAF2B;AAG3BG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,MAAoB;AAAED,MAAAA,KAAK,EAAEA,KAAK,GAAG;AAAjB,KAApB,CADF;AAERE,IAAAA,QAAQ,EAAE,CAACF,KAAD,EAAQC,MAAR,MAAoB;AAAED,MAAAA,KAAK,EAAEA,KAAK,GAAG;AAAjB,KAApB;AAFF;AAHiB,CAAD,CAA5B;AASA,MAAMG,OAAO,GAAGP,QAAQ,CAACQ,OAAzB;AAEA,OAAO,MAAM;AAAEL,EAAAA,QAAF;AAAYG,EAAAA;AAAZ,IAAyBN,QAAQ,CAACS,OAAxC,C,CAEP;;AACA,OAAO,MAAMC,aAAa,GAAG,MAAOC,QAAD,IAAc;AAC/CC,EAAAA,UAAU,CAAC,MAAM;AACfD,IAAAA,QAAQ,CAACR,QAAQ,EAAT,CAAR;AACD,GAFS,EAEP,IAFO,CAAV;AAGD,CAJM;AAKP,OAAO,MAAMU,aAAa,GAAG,MAAOF,QAAD,IAAc;AAC/CC,EAAAA,UAAU,CAAC,MAAM;AACfE,IAAAA,QAAQ,CAACR,QAAQ,EAAT,CAAR;AACD,GAFS,EAEP,IAFO,CAAV;AAGD,CAJM;AAMP,eAAeC,OAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = 0;\n\nconst counters = createSlice({\n  name: \"counterReducer\",\n  initialState,\n  reducers: {\n    increase: (state, action) => ({ state: state + 1 }),\n    decrease: (state, action) => ({ state: state - 1 }),\n  },\n});\n\nconst counter = counters.reducer;\n\nexport const { increase, decrease } = counters.actions;\n\n// 1초 뒤에 incerase 혹은 decrease 함수를 디스패치\nexport const increaseAsync = () => (dispatch) => {\n  setTimeout(() => {\n    dispatch(increase());\n  }, 1000);\n};\nexport const decreaseAsync = () => (dispatch) => {\n  setTimeout(() => {\n    distpach(decrease());\n  }, 1000);\n};\n\nexport default counter;\n"]},"metadata":{},"sourceType":"module"}